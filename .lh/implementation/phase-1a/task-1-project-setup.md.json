{
    "sourceFile": "implementation/phase-1a/task-1-project-setup.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755715942790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755715963435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1034 @@\n+# Task 1: Project Setup - Detailed Steps\n+\n+## Overview\n+Set up the basic PHP project structure with GitHub repository, Composer, and essential files. This creates the foundation for all subsequent development.\n+\n+**Estimated Time:** 1-2 hours  \n+**Dependencies:** None\n+\n+---\n+\n+## Step 1.1: Create GitHub Repository\n+**Time:** 10-15 minutes\n+\n+### Instructions:\n+1. Go to [GitHub.com](https://github.com) and click \"New repository\"\n+2. Choose repository name: `portable-content-php` (or your preference)\n+3. Add description: \"PHP implementation of portable content system - Phase 1A MVP\"\n+4. Set to **Public** (for open source) or **Private** (if preferred)\n+5. **Check** \"Add a README file\"\n+6. **Check** \"Add .gitignore\" and select **PHP** template\n+7. **Don't** add a license yet (can add later)\n+8. Click \"Create repository\"\n+\n+### Example Repository Settings:\n+```\n+Repository name: portable-content-php\n+Description: PHP implementation of portable content system - Phase 1A MVP\n+Visibility: Public\n+Initialize with:\n+  ✅ Add a README file\n+  ✅ Add .gitignore (PHP template)\n+  ❌ Choose a license (add later if needed)\n+```\n+\n+### Validation:\n+- [X] Repository exists and is accessible\n+- [X] README.md file is present\n+- [ ] .gitignore file contains PHP-specific ignores\n+- [X] Repository URL works: `https://github.com/portable-content/portable-content-php`\n+\n+---\n+\n+## Step 1.2: Clone Repository Locally\n+**Time:** 5 minutes\n+\n+### Instructions:\n+1. Copy the repository URL from GitHub\n+2. Open terminal/command prompt\n+3. Navigate to your development directory\n+4. Clone the repository:\n+   ```bash\n+   git clone https://github.com/portable-content/portable-content-php.git\n+   cd portable-content-php\n+   ```\n+\n+### Validation:\n+- [X] Repository is cloned to local machine\n+- [X] Can navigate into project directory\n+- [X] `.git` folder exists (hidden folder)\n+- [ ] README.md and .gitignore are present locally\n+\n+---\n+\n+## Step 1.3: Initialize Composer Project\n+**Time:** 10-15 minutes\n+\n+### Instructions:\n+1. Ensure you have Composer installed:\n+   ```bash\n+   composer --version\n+   ```\n+   If not installed, visit [getcomposer.org](https://getcomposer.org/download/)\n+\n+2. Initialize Composer project:\n+   ```bash\n+   composer init\n+   ```\n+\n+3. Answer the interactive prompts:\n+   ```\n+   Package name: portable-content/portable-content-php\n+   Description: PHP implementation of portable content system\n+   Author: Your Name <your.email@example.com>\n+   Minimum Stability: stable\n+   Package Type: project\n+   License: MIT (or leave blank)\n+   ```\n+\n+4. When asked about dependencies, say **no** for now (we'll add them manually)\n+\n+### Example composer.json Result:\n+```json\n+{\n+    \"name\": \"portable-content/portable-content-php\",\n+    \"description\": \"PHP implementation of portable content system\",\n+    \"type\": \"project\",\n+    \"authors\": [\n+        {\n+            \"name\": \"Your Name\",\n+            \"email\": \"your.email@example.com\"\n+        }\n+    ],\n+    \"minimum-stability\": \"stable\",\n+    \"require\": {}\n+}\n+```\n+\n+### Validation:\n+- [ ] `composer.json` file is created\n+- [ ] File contains correct package information\n+- [ ] `composer install` runs without errors (even with empty dependencies)\n+\n+---\n+\n+## Step 1.4: Add Required Dependencies\n+**Time:** 5-10 minutes\n+\n+### Instructions:\n+1. Edit `composer.json` to add dependencies and autoloading:\n+   ```json\n+   {\n+       \"name\": \"portable-content/portable-content-php\",\n+       \"description\": \"PHP implementation of portable content system\",\n+       \"type\": \"project\",\n+       \"authors\": [\n+           {\n+               \"name\": \"Your Name\",\n+               \"email\": \"your.email@example.com\"\n+           }\n+       ],\n+       \"minimum-stability\": \"stable\",\n+       \"require\": {\n+           \"php\": \"^8.3\",\n+           \"ramsey/uuid\": \"^4.7\"\n+       },\n+       \"require-dev\": {\n+           \"ergebnis/composer-normalize\": \"^2.42\",\n+           \"friendsofphp/php-cs-fixer\": \"^3.0\",\n+           \"phpstan/phpstan\": \"^1.10\",\n+           \"phpstan/phpstan-phpunit\": \"^1.4\",\n+           \"phpunit/phpunit\": \"^11.0\",\n+           \"roave/security-advisories\": \"dev-master\"\n+       },\n+       \"autoload\": {\n+           \"psr-4\": {\n+               \"PortableContent\\\\\": \"src/\"\n+           }\n+       },\n+       \"autoload-dev\": {\n+           \"psr-4\": {\n+               \"PortableContent\\\\Tests\\\\\": \"tests/\"\n+           }\n+       },\n+       \"scripts\": {\n+           \"test\": \"phpunit\",\n+           \"test-coverage\": \"phpunit --coverage-clover coverage.xml --coverage-html coverage\",\n+           \"cs-check\": \"php-cs-fixer fix --dry-run --diff\",\n+           \"cs-fix\": \"php-cs-fixer fix\",\n+           \"phpstan\": \"phpstan analyse\",\n+           \"composer-normalize\": \"composer normalize --dry-run\",\n+           \"composer-normalize-fix\": \"composer normalize\",\n+           \"security-audit\": \"composer audit\"\n+       }\n+   }\n+   ```\n+\n+2. Install dependencies:\n+   ```bash\n+   composer install\n+   ```\n+\n+### Validation:\n+- [ ] `vendor/` directory is created\n+- [ ] `composer.lock` file is generated\n+- [ ] No error messages during installation\n+- [ ] `composer test` command is available (will fail until tests exist)\n+\n+---\n+\n+## Step 1.5: Create Directory Structure\n+**Time:** 5 minutes\n+\n+### Instructions:\n+Create the following directories and files:\n+\n+```bash\n+mkdir src\n+mkdir tests\n+mkdir tests/Unit\n+mkdir tests/Integration\n+mkdir storage\n+mkdir migrations\n+touch src/.gitkeep\n+touch tests/.gitkeep\n+touch storage/.gitkeep\n+touch migrations/.gitkeep\n+```\n+\n+### Expected Directory Structure:\n+```\n+portable-content-php/\n+├── .git/\n+├── .gitignore\n+├── README.md\n+├── composer.json\n+├── composer.lock\n+├── vendor/\n+├── src/\n+│   └── .gitkeep\n+├── tests/\n+│   ├── Unit/\n+│   ├── Integration/\n+│   └── .gitkeep\n+├── storage/\n+│   └── .gitkeep\n+└── migrations/\n+    └── .gitkeep\n+```\n+\n+### Validation:\n+- [ ] All directories exist\n+- [ ] Directory structure matches expected layout\n+- [ ] `.gitkeep` files ensure empty directories are tracked by Git\n+\n+---\n+\n+## Step 1.6: Update README.md\n+**Time:** 10-15 minutes\n+\n+### Instructions:\n+Replace the default README.md content with:\n+\n+```markdown\n+# Portable Content PHP\n+\n+PHP implementation of the portable content system - Phase 1A MVP.\n+\n+## Overview\n+\n+This is a minimal viable implementation focusing on markdown content storage and retrieval using SQLite. Part of the larger portable content system design.\n+\n+## Phase 1A Goals\n+\n+- ✅ Basic content entity storage (ContentItem, MarkdownBlock)\n+- ✅ SQLite database with simple schema\n+- ✅ Repository pattern for data access\n+- ✅ Input validation\n+- ✅ Comprehensive testing\n+\n+## Requirements\n+\n+- PHP 8.3 or higher\n+- Composer\n+- SQLite (included with PHP)\n+\n+## Installation\n+\n+```bash\n+git clone https://github.com/portable-content/portable-content-php.git\n+cd portable-content-php\n+composer install\n+```\n+\n+## Usage\n+\n+*Coming soon - Phase 1A implementation in progress*\n+\n+## Development\n+\n+```bash\n+# Run tests\n+composer test\n+\n+# Run tests with coverage\n+composer test-coverage\n+\n+# Run specific test suite\n+./vendor/bin/phpunit --testsuite=Unit\n+\n+# Code quality checks\n+composer cs-check          # Check code style\n+composer cs-fix            # Fix code style\n+composer phpstan           # Run static analysis\n+composer security-audit    # Check for security issues\n+\n+# Composer maintenance\n+composer composer-normalize # Check composer.json format\n+composer composer-normalize-fix # Fix composer.json format\n+```\n+\n+## Project Structure\n+\n+```\n+src/           # Source code\n+tests/         # Test files\n+storage/       # SQLite database files\n+migrations/    # Database schema migrations\n+```\n+\n+## License\n+\n+MIT License (or your preferred license)\n+```\n+\n+### Validation:\n+- [ ] README.md is updated with project information\n+- [ ] Installation instructions are clear\n+- [ ] Project structure is documented\n+- [ ] Goals and requirements are listed\n+\n+---\n+\n+## Step 1.7: Update .gitignore\n+**Time:** 5 minutes\n+\n+### Instructions:\n+The PHP template should be good, but add these specific entries to `.gitignore`:\n+\n+```gitignore\n+# Composer\n+/vendor/\n+\n+# PHPUnit\n+/coverage/\n+.phpunit.result.cache\n+\n+# Storage\n+/storage/*.db\n+/storage/*.sqlite\n+\n+# IDE\n+.vscode/\n+.idea/\n+*.swp\n+*.swo\n+\n+# OS\n+.DS_Store\n+Thumbs.db\n+\n+# Environment\n+.env\n+.env.local\n+```\n+\n+### Validation:\n+- [ ] .gitignore includes all necessary patterns\n+- [ ] Database files will be ignored\n+- [ ] IDE and OS files will be ignored\n+- [ ] Coverage reports will be ignored\n+\n+---\n+\n+## Step 1.8: Create Code Quality Configuration Files\n+**Time:** 10-15 minutes\n+\n+### Instructions:\n+1. Create `.php-cs-fixer.php` configuration:\n+\n+```php\n+<?php\n+\n+declare(strict_types=1);\n+\n+$finder = PhpCsFixer\\Finder::create()\n+    ->in(__DIR__ . '/src')\n+    ->in(__DIR__ . '/tests')\n+    ->name('*.php')\n+    ->ignoreDotFiles(true)\n+    ->ignoreVCS(true);\n+\n+return (new PhpCsFixer\\Config())\n+    ->setRules([\n+        '@PHP-CS-Fixer' => true,\n+        '@PHP83Migration' => true,\n+        'declare_strict_types' => true,\n+        'array_syntax' => ['syntax' => 'short'],\n+        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n+        'no_unused_imports' => true,\n+        'not_operator_with_successor_space' => false,\n+        'trailing_comma_in_multiline' => true,\n+        'phpdoc_scalar' => true,\n+        'unary_operator_spaces' => true,\n+        'binary_operator_spaces' => true,\n+        'blank_line_before_statement' => [\n+            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n+        ],\n+        'phpdoc_single_line_var_spacing' => true,\n+        'phpdoc_var_without_name' => true,\n+        'method_argument_space' => [\n+            'on_multiline' => 'ensure_fully_multiline',\n+            'keep_multiple_spaces_after_comma' => true,\n+        ],\n+    ])\n+    ->setFinder($finder)\n+    ->setRiskyAllowed(true)\n+    ->setUsingCache(true);\n+```\n+\n+2. Create `phpstan.neon` configuration:\n+\n+```neon\n+parameters:\n+    level: 9\n+    paths:\n+        - src\n+        - tests\n+    excludePaths:\n+        - tests/bootstrap.php\n+    checkMissingIterableValueType: false\n+    checkGenericClassInNonGenericObjectType: false\n+    ignoreErrors:\n+        - '#Call to an undefined method PHPUnit\\\\Framework\\\\MockObject\\\\MockObject::#'\n+```\n+\n+3. Create `.github/workflows` directory:\n+```bash\n+mkdir -p .github/workflows\n+```\n+\n+### Validation:\n+- [ ] .php-cs-fixer.php is created with proper configuration\n+- [ ] phpstan.neon is created with appropriate rules\n+- [ ] .github/workflows directory exists\n+\n+---\n+\n+## Step 1.9: Create GitHub Actions Workflows\n+**Time:** 15-20 minutes\n+\n+### Instructions:\n+1. Create `.github/workflows/test.yaml`:\n+\n+```yaml\n+name: Tests\n+\n+on:\n+  push:\n+    branches: [ main, develop ]\n+  pull_request:\n+    branches: [ main, develop ]\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+\n+    strategy:\n+      matrix:\n+        php-version: ['8.3', '8.4']\n+\n+    steps:\n+    - uses: actions/checkout@v4\n+\n+    - name: Setup PHP ${{ matrix.php-version }}\n+      uses: shivammathur/setup-php@v2\n+      with:\n+        php-version: ${{ matrix.php-version }}\n+        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n+        coverage: xdebug\n+\n+    - name: Cache Composer packages\n+      id: composer-cache\n+      uses: actions/cache@v4\n+      with:\n+        path: vendor\n+        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-php-${{ matrix.php-version }}-\n+\n+    - name: Install dependencies\n+      run: composer install --prefer-dist --no-progress\n+\n+    - name: Run test suite\n+      run: composer test-coverage\n+\n+    - name: Upload coverage reports to Codecov\n+      if: matrix.php-version == '8.3'\n+      uses: codecov/codecov-action@v5\n+      with:\n+        file: ./coverage.xml\n+        flags: unittests,integration\n+        name: codecov-umbrella\n+        token: ${{ secrets.CODECOV_TOKEN }}\n+```\n+\n+2. Create `.github/workflows/lint.yaml`:\n+\n+```yaml\n+name: Lint\n+\n+on:\n+  push:\n+    branches: [ main, develop ]\n+  pull_request:\n+    branches: [ main, develop ]\n+\n+jobs:\n+  php-cs-fixer:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v4\n+\n+    - name: Setup PHP\n+      uses: shivammathur/setup-php@v2\n+      with:\n+        php-version: '8.3'\n+        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n+        coverage: none\n+\n+    - name: Cache Composer packages\n+      id: composer-cache\n+      uses: actions/cache@v4\n+      with:\n+        path: vendor\n+        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-php-\n+\n+    - name: Install dependencies\n+      run: composer install --prefer-dist --no-progress\n+\n+    - name: Run PHP CS Fixer\n+      run: composer run-script cs-check\n+\n+  phpstan:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v4\n+\n+    - name: Setup PHP\n+      uses: shivammathur/setup-php@v2\n+      with:\n+        php-version: '8.3'\n+        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n+        coverage: none\n+\n+    - name: Cache Composer packages\n+      id: composer-cache\n+      uses: actions/cache@v4\n+      with:\n+        path: vendor\n+        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-php-\n+\n+    - name: Install dependencies\n+      run: composer install --prefer-dist --no-progress\n+\n+    - name: Run PHPStan\n+      run: composer run-script phpstan\n+\n+  composer-normalize:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v4\n+\n+    - name: Setup PHP\n+      uses: shivammathur/setup-php@v2\n+      with:\n+        php-version: '8.3'\n+        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n+        coverage: none\n+\n+    - name: Cache Composer packages\n+      id: composer-cache\n+      uses: actions/cache@v4\n+      with:\n+        path: vendor\n+        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-php-\n+\n+    - name: Install dependencies\n+      run: composer install --prefer-dist --no-progress\n+\n+    - name: Run Composer Normalize\n+      run: composer run-script composer-normalize\n+\n+  security-audit:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v4\n+\n+    - name: Setup PHP\n+      uses: shivammathur/setup-php@v2\n+      with:\n+        php-version: '8.3'\n+        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n+        coverage: none\n+\n+    - name: Cache Composer packages\n+      id: composer-cache\n+      uses: actions/cache@v4\n+      with:\n+        path: vendor\n+        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n+        restore-keys: |\n+          ${{ runner.os }}-php-\n+\n+    - name: Install dependencies\n+      run: composer install --prefer-dist --no-progress\n+\n+    - name: Run Security Audit\n+      run: composer run-script security-audit\n+```\n+\n+### Validation:\n+- [ ] test.yaml workflow is created with proper PHP matrix\n+- [ ] lint.yaml workflow includes all quality checks\n+- [ ] Codecov v4 is configured with integration test flags\n+- [ ] All workflows use latest action versions\n+\n+---\n+\n+## Step 1.10: Update .gitignore for Testing and Tools\n+**Time:** 5 minutes\n+\n+### Instructions:\n+Add these comprehensive entries to `.gitignore`:\n+\n+```gitignore\n+# Composer\n+/vendor/\n+\n+# PHPUnit\n+/coverage/\n+coverage.xml\n+.phpunit.cache/\n+.phpunit.result.cache\n+\n+# PHP CS Fixer\n+.php-cs-fixer.cache\n+\n+# PHPStan\n+.phpstan.cache\n+\n+# Storage\n+/storage/*.db\n+/storage/*.sqlite\n+\n+# IDE\n+.vscode/\n+.idea/\n+*.swp\n+*.swo\n+\n+# OS\n+.DS_Store\n+Thumbs.db\n+\n+# Environment\n+.env\n+.env.local\n+\n+# Testing\n+/tests/_output/\n+/tests/_support/_generated/\n+\n+# Build artifacts\n+/build/\n+```\n+\n+### Validation:\n+- [ ] .gitignore includes testing directories\n+- [ ] Coverage reports will be ignored\n+- [ ] PHPUnit cache will be ignored\n+- [ ] All necessary patterns are included\n+\n+---\n+\n+## Step 1.11: Initial Commit\n+**Time:** 5 minutes\n+\n+### Instructions:\n+1. Stage all files:\n+   ```bash\n+   git add .\n+   ```\n+\n+2. Commit with descriptive message:\n+   ```bash\n+   git commit -m \"Initial project setup with comprehensive tooling\n+\n+   - Created PHP project structure with modern tooling\n+   - Added Composer configuration with quality tools\n+   - Set up PHP CS Fixer, PHPStan, and security auditing\n+   - Configured PHPUnit with proper test structure\n+   - Added base TestCase class with testing utilities\n+   - Created example tests to verify setup\n+   - Set up GitHub Actions for CI/CD with Codecov v4\n+   - Added comprehensive linting and quality checks\n+   - Updated README with project information\n+   - Configured .gitignore for all tools and artifacts\"\n+   ```\n+\n+3. Push to GitHub:\n+   ```bash\n+   git push origin main\n+   ```\n+\n+### Validation:\n+- [ ] All files are committed\n+- [ ] Commit message describes complete setup\n+- [ ] Changes are pushed to GitHub\n+- [ ] GitHub repository shows all setup files\n+\n+---\n+\n+## Step 1.9: Configure PHPUnit Testing\n+**Time:** 10-15 minutes\n+\n+### Instructions:\n+1. Create `phpunit.xml` configuration file:\n+\n+```xml\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.0/phpunit.xsd\"\n+         bootstrap=\"vendor/autoload.php\"\n+         colors=\"true\"\n+         cacheDirectory=\".phpunit.cache\"\n+         executionOrder=\"depends,defects\"\n+         requireCoverageMetadata=\"true\"\n+         beStrictAboutCoverageMetadata=\"true\"\n+         beStrictAboutOutputDuringTests=\"true\"\n+         failOnRisky=\"true\"\n+         failOnWarning=\"true\">\n+\n+    <testsuites>\n+        <testsuite name=\"Unit\">\n+            <directory>tests/Unit</directory>\n+        </testsuite>\n+        <testsuite name=\"Integration\">\n+            <directory>tests/Integration</directory>\n+        </testsuite>\n+    </testsuites>\n+\n+    <source>\n+        <include>\n+            <directory>src</directory>\n+        </include>\n+    </source>\n+\n+    <coverage>\n+        <report>\n+            <html outputDirectory=\"coverage\"/>\n+            <text outputFile=\"php://stdout\"/>\n+        </report>\n+    </coverage>\n+\n+    <logging>\n+        <junit outputFile=\"coverage/junit.xml\"/>\n+    </logging>\n+</phpunit>\n+```\n+\n+2. Create base test class `tests/TestCase.php`:\n+\n+```php\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace PortableContent\\Tests;\n+\n+use PDO;\n+use PHPUnit\\Framework\\TestCase;\n+use PortableContent\\Database\\Database;\n+use PortableContent\\Repository\\RepositoryFactory;\n+use PortableContent\\Repository\\ContentRepositoryInterface;\n+\n+abstract class IntegrationTestCase extends TestCase\n+{\n+    protected function createTestDatabase(): PDO\n+    {\n+        $pdo = Database::createInMemory();\n+        Database::runMigrations($pdo);\n+        return $pdo;\n+    }\n+\n+    protected function createTestRepository(): ContentRepositoryInterface\n+    {\n+        return RepositoryFactory::createInMemoryRepository();\n+    }\n+\n+    protected function tearDown(): void\n+    {\n+        // Reset any static state\n+        RepositoryFactory::resetDefault();\n+        parent::tearDown();\n+    }\n+}\n+```\n+\n+3. Create first test `tests/Unit/ExampleTest.php`:\n+\n+```php\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace PortableContent\\Tests\\Unit;\n+\n+use PHPUnit\\Framework\\TestCase;\n+\n+final class ExampleTest extends TestCase\n+{\n+    public function testBasicAssertion(): void\n+    {\n+        $this->assertTrue(true);\n+    }\n+\n+    public function testPHPVersion(): void\n+    {\n+        $this->assertGreaterThanOrEqual('8.3.0', PHP_VERSION);\n+    }\n+\n+    public function testAutoloadingWorks(): void\n+    {\n+        $this->assertTrue(class_exists('PortableContent\\ContentItem'));\n+        $this->assertTrue(interface_exists('PortableContent\\Repository\\ContentRepositoryInterface'));\n+    }\n+}\n+```\n+\n+### Validation:\n+- [ ] phpunit.xml is created with proper configuration\n+- [ ] Base TestCase class provides testing utilities\n+- [ ] Example test runs successfully\n+- [ ] Test structure is organized (Unit/Integration)\n+\n+---\n+\n+## Step 1.10: Test the Testing Setup\n+**Time:** 5-10 minutes\n+\n+### Instructions:\n+1. Run the tests to verify setup:\n+\n+```bash\n+# Run all tests\n+composer test\n+\n+# Run tests with verbose output\n+./vendor/bin/phpunit --verbose\n+\n+# Run specific test suite\n+./vendor/bin/phpunit --testsuite=Unit\n+\n+# Generate coverage report\n+composer test-coverage\n+```\n+\n+### Expected Output:\n+```bash\n+$ composer test\n+PHPUnit 11.x.x by Sebastian Bergmann and contributors.\n+\n+Runtime:       PHP 8.3.x\n+\n+...                                                                 3 / 3 (100%)\n+\n+Time: 00:00.123, Memory: 6.00 MB\n+\n+OK (3 tests, 3 assertions)\n+```\n+\n+2. Verify coverage directory is created:\n+```bash\n+ls -la coverage/\n+```\n+\n+### Validation:\n+- [ ] Tests run successfully\n+- [ ] Coverage reports are generated\n+- [ ] No errors or warnings\n+- [ ] Test output is clean and informative\n+\n+---\n+\n+## Step 1.11: Verify Complete Setup\n+**Time:** 5 minutes\n+\n+### Instructions:\n+Run these commands to verify everything is working:\n+\n+```bash\n+# Check PHP version (should be 8.3+)\n+php --version\n+\n+# Check Composer\n+composer --version\n+\n+# Verify autoloading works\n+composer dump-autoload\n+\n+# Run all quality checks\n+composer test                    # Run tests\n+composer cs-check               # Check code style\n+composer phpstan               # Run static analysis\n+composer composer-normalize    # Check composer.json format\n+composer security-audit       # Security check\n+\n+# Check project structure\n+ls -la\n+\n+# Verify dependencies\n+composer show\n+\n+# Test GitHub Actions locally (if act is installed)\n+# act -j test\n+```\n+\n+### Expected Output Examples:\n+```bash\n+$ php --version\n+PHP 8.3.x (cli) (built: ...)\n+\n+$ composer test\n+PHPUnit 11.x.x by Sebastian Bergmann and contributors.\n+OK (3 tests, 3 assertions)\n+\n+$ composer cs-check\n+PHP CS Fixer 3.x by Fabien Potencier and Dariusz Ruminski.\n+Loaded config default from \".php-cs-fixer.php\".\n+No files need fixing.\n+\n+$ composer phpstan\n+PHPStan - PHP Static Analysis Tool 1.x.x\n+[OK] No errors\n+\n+$ ls -la\n+drwxr-xr-x  .github/\n+drwxr-xr-x  src/\n+drwxr-xr-x  tests/\n+drwxr-xr-x  storage/\n+drwxr-xr-x  migrations/\n+drwxr-xr-x  vendor/\n+drwxr-xr-x  coverage/\n+-rw-r--r--  .php-cs-fixer.php\n+-rw-r--r--  phpstan.neon\n+-rw-r--r--  composer.json\n+-rw-r--r--  composer.lock\n+-rw-r--r--  phpunit.xml\n+-rw-r--r--  README.md\n+```\n+\n+### Validation:\n+- [ ] PHP 8.3+ is available\n+- [ ] Composer is working\n+- [ ] All directories exist\n+- [ ] Dependencies are installed\n+- [ ] Autoloading is configured\n+- [ ] Tests run successfully\n+- [ ] Coverage reports generate\n+\n+---\n+\n+## Completion Checklist\n+\n+### Repository Setup:\n+- [ ] GitHub repository created and accessible\n+- [ ] Repository cloned locally\n+- [ ] Initial README and .gitignore present\n+\n+### Composer Configuration:\n+- [ ] composer.json with correct dependencies\n+- [ ] Autoloading configured for src/ and tests/\n+- [ ] Dependencies installed successfully\n+- [ ] Test scripts configured\n+\n+### Project Structure:\n+- [ ] src/ directory for source code\n+- [ ] tests/ directory with Unit and Integration subdirectories\n+- [ ] storage/ directory for database files\n+- [ ] migrations/ directory for schema files\n+\n+### Testing Infrastructure:\n+- [ ] PHPUnit configured with proper settings\n+- [ ] Base TestCase class with testing utilities\n+- [ ] Example tests run successfully\n+- [ ] Coverage reporting configured with Codecov v4\n+- [ ] Test database helpers available\n+\n+### Code Quality Tools:\n+- [ ] PHP CS Fixer configured with modern standards\n+- [ ] PHPStan configured for level 9 analysis\n+- [ ] Composer normalize for consistent composer.json\n+- [ ] Security audit tools configured\n+- [ ] All quality tools have composer scripts\n+\n+### CI/CD Pipeline:\n+- [ ] GitHub Actions workflows for testing\n+- [ ] GitHub Actions workflows for linting\n+- [ ] Multi-PHP version testing (8.3, 8.4)\n+- [ ] Codecov integration with unit and integration flags\n+- [ ] Automated security auditing\n+\n+### Documentation:\n+- [ ] README.md updated with project information\n+- [ ] .gitignore configured for PHP project and testing\n+- [ ] Directory structure documented\n+- [ ] Testing commands documented\n+\n+### Version Control:\n+- [ ] Initial commit made with all setup files\n+- [ ] Changes pushed to GitHub\n+- [ ] Repository is ready for development\n+\n+---\n+\n+## Next Steps\n+\n+With Task 1 complete, you're ready to move on to **Task 2: Basic Data Classes**. The foundation is now in place to start implementing the core ContentItem and MarkdownBlock classes.\n+\n+## Troubleshooting\n+\n+### Common Issues:\n+\n+**Composer not found:**\n+- Install Composer from [getcomposer.org](https://getcomposer.org/download/)\n+\n+**PHP version too old:**\n+- Install PHP 8.3+ or update your PHP installation\n+\n+**Permission errors:**\n+- Ensure you have write permissions in the project directory\n+\n+**Git authentication issues:**\n+- Set up SSH keys or use personal access tokens for GitHub\n"
                },
                {
                    "date": 1755715987613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n    Description: PHP implementation of portable content system\n    Author: Your Name <your.email@example.com>\n    Minimum Stability: stable\n    Package Type: project\n-   License: MIT (or leave blank)\n+   License: Apache-2.0\n    ```\n \n 4. When asked about dependencies, say **no** for now (we'll add them manually)\n \n"
                }
            ],
            "date": 1755715942790,
            "name": "Commit-0",
            "content": "# Task 1: Project Setup - Detailed Steps\n\n## Overview\nSet up the basic PHP project structure with GitHub repository, Composer, and essential files. This creates the foundation for all subsequent development.\n\n**Estimated Time:** 1-2 hours  \n**Dependencies:** None\n\n---\n\n## Step 1.1: Create GitHub Repository\n**Time:** 10-15 minutes\n\n### Instructions:\n1. Go to [GitHub.com](https://github.com) and click \"New repository\"\n2. Choose repository name: `portable-content-php` (or your preference)\n3. Add description: \"PHP implementation of portable content system - Phase 1A MVP\"\n4. Set to **Public** (for open source) or **Private** (if preferred)\n5. **Check** \"Add a README file\"\n6. **Check** \"Add .gitignore\" and select **PHP** template\n7. **Don't** add a license yet (can add later)\n8. Click \"Create repository\"\n\n### Example Repository Settings:\n```\nRepository name: portable-content-php\nDescription: PHP implementation of portable content system - Phase 1A MVP\nVisibility: Public\nInitialize with:\n  ✅ Add a README file\n  ✅ Add .gitignore (PHP template)\n  ❌ Choose a license (add later if needed)\n```\n\n### Validation:\n- [X] Repository exists and is accessible\n- [X] README.md file is present\n- [ ] .gitignore file contains PHP-specific ignores\n- [X] Repository URL works: `https://github.com/portable-content/portable-content-php`\n\n---\n\n## Step 1.2: Clone Repository Locally\n**Time:** 5 minutes\n\n### Instructions:\n1. Copy the repository URL from GitHub\n2. Open terminal/command prompt\n3. Navigate to your development directory\n4. Clone the repository:\n   ```bash\n   git clone https://github.com/portable-content/portable-content-php.git\n   cd portable-content-php\n   ```\n\n### Validation:\n- [ ] Repository is cloned to local machine\n- [ ] Can navigate into project directory\n- [ ] `.git` folder exists (hidden folder)\n- [ ] README.md and .gitignore are present locally\n\n---\n\n## Step 1.3: Initialize Composer Project\n**Time:** 10-15 minutes\n\n### Instructions:\n1. Ensure you have Composer installed:\n   ```bash\n   composer --version\n   ```\n   If not installed, visit [getcomposer.org](https://getcomposer.org/download/)\n\n2. Initialize Composer project:\n   ```bash\n   composer init\n   ```\n\n3. Answer the interactive prompts:\n   ```\n   Package name: portable-content/portable-content-php\n   Description: PHP implementation of portable content system\n   Author: Your Name <your.email@example.com>\n   Minimum Stability: stable\n   Package Type: project\n   License: MIT (or leave blank)\n   ```\n\n4. When asked about dependencies, say **no** for now (we'll add them manually)\n\n### Example composer.json Result:\n```json\n{\n    \"name\": \"portable-content/portable-content-php\",\n    \"description\": \"PHP implementation of portable content system\",\n    \"type\": \"project\",\n    \"authors\": [\n        {\n            \"name\": \"Your Name\",\n            \"email\": \"your.email@example.com\"\n        }\n    ],\n    \"minimum-stability\": \"stable\",\n    \"require\": {}\n}\n```\n\n### Validation:\n- [ ] `composer.json` file is created\n- [ ] File contains correct package information\n- [ ] `composer install` runs without errors (even with empty dependencies)\n\n---\n\n## Step 1.4: Add Required Dependencies\n**Time:** 5-10 minutes\n\n### Instructions:\n1. Edit `composer.json` to add dependencies and autoloading:\n   ```json\n   {\n       \"name\": \"portable-content/portable-content-php\",\n       \"description\": \"PHP implementation of portable content system\",\n       \"type\": \"project\",\n       \"authors\": [\n           {\n               \"name\": \"Your Name\",\n               \"email\": \"your.email@example.com\"\n           }\n       ],\n       \"minimum-stability\": \"stable\",\n       \"require\": {\n           \"php\": \"^8.3\",\n           \"ramsey/uuid\": \"^4.7\"\n       },\n       \"require-dev\": {\n           \"ergebnis/composer-normalize\": \"^2.42\",\n           \"friendsofphp/php-cs-fixer\": \"^3.0\",\n           \"phpstan/phpstan\": \"^1.10\",\n           \"phpstan/phpstan-phpunit\": \"^1.4\",\n           \"phpunit/phpunit\": \"^11.0\",\n           \"roave/security-advisories\": \"dev-master\"\n       },\n       \"autoload\": {\n           \"psr-4\": {\n               \"PortableContent\\\\\": \"src/\"\n           }\n       },\n       \"autoload-dev\": {\n           \"psr-4\": {\n               \"PortableContent\\\\Tests\\\\\": \"tests/\"\n           }\n       },\n       \"scripts\": {\n           \"test\": \"phpunit\",\n           \"test-coverage\": \"phpunit --coverage-clover coverage.xml --coverage-html coverage\",\n           \"cs-check\": \"php-cs-fixer fix --dry-run --diff\",\n           \"cs-fix\": \"php-cs-fixer fix\",\n           \"phpstan\": \"phpstan analyse\",\n           \"composer-normalize\": \"composer normalize --dry-run\",\n           \"composer-normalize-fix\": \"composer normalize\",\n           \"security-audit\": \"composer audit\"\n       }\n   }\n   ```\n\n2. Install dependencies:\n   ```bash\n   composer install\n   ```\n\n### Validation:\n- [ ] `vendor/` directory is created\n- [ ] `composer.lock` file is generated\n- [ ] No error messages during installation\n- [ ] `composer test` command is available (will fail until tests exist)\n\n---\n\n## Step 1.5: Create Directory Structure\n**Time:** 5 minutes\n\n### Instructions:\nCreate the following directories and files:\n\n```bash\nmkdir src\nmkdir tests\nmkdir tests/Unit\nmkdir tests/Integration\nmkdir storage\nmkdir migrations\ntouch src/.gitkeep\ntouch tests/.gitkeep\ntouch storage/.gitkeep\ntouch migrations/.gitkeep\n```\n\n### Expected Directory Structure:\n```\nportable-content-php/\n├── .git/\n├── .gitignore\n├── README.md\n├── composer.json\n├── composer.lock\n├── vendor/\n├── src/\n│   └── .gitkeep\n├── tests/\n│   ├── Unit/\n│   ├── Integration/\n│   └── .gitkeep\n├── storage/\n│   └── .gitkeep\n└── migrations/\n    └── .gitkeep\n```\n\n### Validation:\n- [ ] All directories exist\n- [ ] Directory structure matches expected layout\n- [ ] `.gitkeep` files ensure empty directories are tracked by Git\n\n---\n\n## Step 1.6: Update README.md\n**Time:** 10-15 minutes\n\n### Instructions:\nReplace the default README.md content with:\n\n```markdown\n# Portable Content PHP\n\nPHP implementation of the portable content system - Phase 1A MVP.\n\n## Overview\n\nThis is a minimal viable implementation focusing on markdown content storage and retrieval using SQLite. Part of the larger portable content system design.\n\n## Phase 1A Goals\n\n- ✅ Basic content entity storage (ContentItem, MarkdownBlock)\n- ✅ SQLite database with simple schema\n- ✅ Repository pattern for data access\n- ✅ Input validation\n- ✅ Comprehensive testing\n\n## Requirements\n\n- PHP 8.3 or higher\n- Composer\n- SQLite (included with PHP)\n\n## Installation\n\n```bash\ngit clone https://github.com/portable-content/portable-content-php.git\ncd portable-content-php\ncomposer install\n```\n\n## Usage\n\n*Coming soon - Phase 1A implementation in progress*\n\n## Development\n\n```bash\n# Run tests\ncomposer test\n\n# Run tests with coverage\ncomposer test-coverage\n\n# Run specific test suite\n./vendor/bin/phpunit --testsuite=Unit\n\n# Code quality checks\ncomposer cs-check          # Check code style\ncomposer cs-fix            # Fix code style\ncomposer phpstan           # Run static analysis\ncomposer security-audit    # Check for security issues\n\n# Composer maintenance\ncomposer composer-normalize # Check composer.json format\ncomposer composer-normalize-fix # Fix composer.json format\n```\n\n## Project Structure\n\n```\nsrc/           # Source code\ntests/         # Test files\nstorage/       # SQLite database files\nmigrations/    # Database schema migrations\n```\n\n## License\n\nMIT License (or your preferred license)\n```\n\n### Validation:\n- [ ] README.md is updated with project information\n- [ ] Installation instructions are clear\n- [ ] Project structure is documented\n- [ ] Goals and requirements are listed\n\n---\n\n## Step 1.7: Update .gitignore\n**Time:** 5 minutes\n\n### Instructions:\nThe PHP template should be good, but add these specific entries to `.gitignore`:\n\n```gitignore\n# Composer\n/vendor/\n\n# PHPUnit\n/coverage/\n.phpunit.result.cache\n\n# Storage\n/storage/*.db\n/storage/*.sqlite\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# Environment\n.env\n.env.local\n```\n\n### Validation:\n- [ ] .gitignore includes all necessary patterns\n- [ ] Database files will be ignored\n- [ ] IDE and OS files will be ignored\n- [ ] Coverage reports will be ignored\n\n---\n\n## Step 1.8: Create Code Quality Configuration Files\n**Time:** 10-15 minutes\n\n### Instructions:\n1. Create `.php-cs-fixer.php` configuration:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__ . '/src')\n    ->in(__DIR__ . '/tests')\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PHP-CS-Fixer' => true,\n        '@PHP83Migration' => true,\n        'declare_strict_types' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => false,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n    ])\n    ->setFinder($finder)\n    ->setRiskyAllowed(true)\n    ->setUsingCache(true);\n```\n\n2. Create `phpstan.neon` configuration:\n\n```neon\nparameters:\n    level: 9\n    paths:\n        - src\n        - tests\n    excludePaths:\n        - tests/bootstrap.php\n    checkMissingIterableValueType: false\n    checkGenericClassInNonGenericObjectType: false\n    ignoreErrors:\n        - '#Call to an undefined method PHPUnit\\\\Framework\\\\MockObject\\\\MockObject::#'\n```\n\n3. Create `.github/workflows` directory:\n```bash\nmkdir -p .github/workflows\n```\n\n### Validation:\n- [ ] .php-cs-fixer.php is created with proper configuration\n- [ ] phpstan.neon is created with appropriate rules\n- [ ] .github/workflows directory exists\n\n---\n\n## Step 1.9: Create GitHub Actions Workflows\n**Time:** 15-20 minutes\n\n### Instructions:\n1. Create `.github/workflows/test.yaml`:\n\n```yaml\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        php-version: ['8.3', '8.4']\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup PHP ${{ matrix.php-version }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php-version }}\n        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n        coverage: xdebug\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v4\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-php-${{ matrix.php-version }}-\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --no-progress\n\n    - name: Run test suite\n      run: composer test-coverage\n\n    - name: Upload coverage reports to Codecov\n      if: matrix.php-version == '8.3'\n      uses: codecov/codecov-action@v5\n      with:\n        file: ./coverage.xml\n        flags: unittests,integration\n        name: codecov-umbrella\n        token: ${{ secrets.CODECOV_TOKEN }}\n```\n\n2. Create `.github/workflows/lint.yaml`:\n\n```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  php-cs-fixer:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.3'\n        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v4\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --no-progress\n\n    - name: Run PHP CS Fixer\n      run: composer run-script cs-check\n\n  phpstan:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.3'\n        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v4\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --no-progress\n\n    - name: Run PHPStan\n      run: composer run-script phpstan\n\n  composer-normalize:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.3'\n        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v4\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --no-progress\n\n    - name: Run Composer Normalize\n      run: composer run-script composer-normalize\n\n  security-audit:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.3'\n        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_sqlite, dom, filter, gd, json\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v4\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --no-progress\n\n    - name: Run Security Audit\n      run: composer run-script security-audit\n```\n\n### Validation:\n- [ ] test.yaml workflow is created with proper PHP matrix\n- [ ] lint.yaml workflow includes all quality checks\n- [ ] Codecov v4 is configured with integration test flags\n- [ ] All workflows use latest action versions\n\n---\n\n## Step 1.10: Update .gitignore for Testing and Tools\n**Time:** 5 minutes\n\n### Instructions:\nAdd these comprehensive entries to `.gitignore`:\n\n```gitignore\n# Composer\n/vendor/\n\n# PHPUnit\n/coverage/\ncoverage.xml\n.phpunit.cache/\n.phpunit.result.cache\n\n# PHP CS Fixer\n.php-cs-fixer.cache\n\n# PHPStan\n.phpstan.cache\n\n# Storage\n/storage/*.db\n/storage/*.sqlite\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# Environment\n.env\n.env.local\n\n# Testing\n/tests/_output/\n/tests/_support/_generated/\n\n# Build artifacts\n/build/\n```\n\n### Validation:\n- [ ] .gitignore includes testing directories\n- [ ] Coverage reports will be ignored\n- [ ] PHPUnit cache will be ignored\n- [ ] All necessary patterns are included\n\n---\n\n## Step 1.11: Initial Commit\n**Time:** 5 minutes\n\n### Instructions:\n1. Stage all files:\n   ```bash\n   git add .\n   ```\n\n2. Commit with descriptive message:\n   ```bash\n   git commit -m \"Initial project setup with comprehensive tooling\n\n   - Created PHP project structure with modern tooling\n   - Added Composer configuration with quality tools\n   - Set up PHP CS Fixer, PHPStan, and security auditing\n   - Configured PHPUnit with proper test structure\n   - Added base TestCase class with testing utilities\n   - Created example tests to verify setup\n   - Set up GitHub Actions for CI/CD with Codecov v4\n   - Added comprehensive linting and quality checks\n   - Updated README with project information\n   - Configured .gitignore for all tools and artifacts\"\n   ```\n\n3. Push to GitHub:\n   ```bash\n   git push origin main\n   ```\n\n### Validation:\n- [ ] All files are committed\n- [ ] Commit message describes complete setup\n- [ ] Changes are pushed to GitHub\n- [ ] GitHub repository shows all setup files\n\n---\n\n## Step 1.9: Configure PHPUnit Testing\n**Time:** 10-15 minutes\n\n### Instructions:\n1. Create `phpunit.xml` configuration file:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.0/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         cacheDirectory=\".phpunit.cache\"\n         executionOrder=\"depends,defects\"\n         requireCoverageMetadata=\"true\"\n         beStrictAboutCoverageMetadata=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\">\n\n    <testsuites>\n        <testsuite name=\"Unit\">\n            <directory>tests/Unit</directory>\n        </testsuite>\n        <testsuite name=\"Integration\">\n            <directory>tests/Integration</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n\n    <coverage>\n        <report>\n            <html outputDirectory=\"coverage\"/>\n            <text outputFile=\"php://stdout\"/>\n        </report>\n    </coverage>\n\n    <logging>\n        <junit outputFile=\"coverage/junit.xml\"/>\n    </logging>\n</phpunit>\n```\n\n2. Create base test class `tests/TestCase.php`:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PortableContent\\Tests;\n\nuse PDO;\nuse PHPUnit\\Framework\\TestCase;\nuse PortableContent\\Database\\Database;\nuse PortableContent\\Repository\\RepositoryFactory;\nuse PortableContent\\Repository\\ContentRepositoryInterface;\n\nabstract class IntegrationTestCase extends TestCase\n{\n    protected function createTestDatabase(): PDO\n    {\n        $pdo = Database::createInMemory();\n        Database::runMigrations($pdo);\n        return $pdo;\n    }\n\n    protected function createTestRepository(): ContentRepositoryInterface\n    {\n        return RepositoryFactory::createInMemoryRepository();\n    }\n\n    protected function tearDown(): void\n    {\n        // Reset any static state\n        RepositoryFactory::resetDefault();\n        parent::tearDown();\n    }\n}\n```\n\n3. Create first test `tests/Unit/ExampleTest.php`:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace PortableContent\\Tests\\Unit;\n\nuse PHPUnit\\Framework\\TestCase;\n\nfinal class ExampleTest extends TestCase\n{\n    public function testBasicAssertion(): void\n    {\n        $this->assertTrue(true);\n    }\n\n    public function testPHPVersion(): void\n    {\n        $this->assertGreaterThanOrEqual('8.3.0', PHP_VERSION);\n    }\n\n    public function testAutoloadingWorks(): void\n    {\n        $this->assertTrue(class_exists('PortableContent\\ContentItem'));\n        $this->assertTrue(interface_exists('PortableContent\\Repository\\ContentRepositoryInterface'));\n    }\n}\n```\n\n### Validation:\n- [ ] phpunit.xml is created with proper configuration\n- [ ] Base TestCase class provides testing utilities\n- [ ] Example test runs successfully\n- [ ] Test structure is organized (Unit/Integration)\n\n---\n\n## Step 1.10: Test the Testing Setup\n**Time:** 5-10 minutes\n\n### Instructions:\n1. Run the tests to verify setup:\n\n```bash\n# Run all tests\ncomposer test\n\n# Run tests with verbose output\n./vendor/bin/phpunit --verbose\n\n# Run specific test suite\n./vendor/bin/phpunit --testsuite=Unit\n\n# Generate coverage report\ncomposer test-coverage\n```\n\n### Expected Output:\n```bash\n$ composer test\nPHPUnit 11.x.x by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.x\n\n...                                                                 3 / 3 (100%)\n\nTime: 00:00.123, Memory: 6.00 MB\n\nOK (3 tests, 3 assertions)\n```\n\n2. Verify coverage directory is created:\n```bash\nls -la coverage/\n```\n\n### Validation:\n- [ ] Tests run successfully\n- [ ] Coverage reports are generated\n- [ ] No errors or warnings\n- [ ] Test output is clean and informative\n\n---\n\n## Step 1.11: Verify Complete Setup\n**Time:** 5 minutes\n\n### Instructions:\nRun these commands to verify everything is working:\n\n```bash\n# Check PHP version (should be 8.3+)\nphp --version\n\n# Check Composer\ncomposer --version\n\n# Verify autoloading works\ncomposer dump-autoload\n\n# Run all quality checks\ncomposer test                    # Run tests\ncomposer cs-check               # Check code style\ncomposer phpstan               # Run static analysis\ncomposer composer-normalize    # Check composer.json format\ncomposer security-audit       # Security check\n\n# Check project structure\nls -la\n\n# Verify dependencies\ncomposer show\n\n# Test GitHub Actions locally (if act is installed)\n# act -j test\n```\n\n### Expected Output Examples:\n```bash\n$ php --version\nPHP 8.3.x (cli) (built: ...)\n\n$ composer test\nPHPUnit 11.x.x by Sebastian Bergmann and contributors.\nOK (3 tests, 3 assertions)\n\n$ composer cs-check\nPHP CS Fixer 3.x by Fabien Potencier and Dariusz Ruminski.\nLoaded config default from \".php-cs-fixer.php\".\nNo files need fixing.\n\n$ composer phpstan\nPHPStan - PHP Static Analysis Tool 1.x.x\n[OK] No errors\n\n$ ls -la\ndrwxr-xr-x  .github/\ndrwxr-xr-x  src/\ndrwxr-xr-x  tests/\ndrwxr-xr-x  storage/\ndrwxr-xr-x  migrations/\ndrwxr-xr-x  vendor/\ndrwxr-xr-x  coverage/\n-rw-r--r--  .php-cs-fixer.php\n-rw-r--r--  phpstan.neon\n-rw-r--r--  composer.json\n-rw-r--r--  composer.lock\n-rw-r--r--  phpunit.xml\n-rw-r--r--  README.md\n```\n\n### Validation:\n- [ ] PHP 8.3+ is available\n- [ ] Composer is working\n- [ ] All directories exist\n- [ ] Dependencies are installed\n- [ ] Autoloading is configured\n- [ ] Tests run successfully\n- [ ] Coverage reports generate\n\n---\n\n## Completion Checklist\n\n### Repository Setup:\n- [ ] GitHub repository created and accessible\n- [ ] Repository cloned locally\n- [ ] Initial README and .gitignore present\n\n### Composer Configuration:\n- [ ] composer.json with correct dependencies\n- [ ] Autoloading configured for src/ and tests/\n- [ ] Dependencies installed successfully\n- [ ] Test scripts configured\n\n### Project Structure:\n- [ ] src/ directory for source code\n- [ ] tests/ directory with Unit and Integration subdirectories\n- [ ] storage/ directory for database files\n- [ ] migrations/ directory for schema files\n\n### Testing Infrastructure:\n- [ ] PHPUnit configured with proper settings\n- [ ] Base TestCase class with testing utilities\n- [ ] Example tests run successfully\n- [ ] Coverage reporting configured with Codecov v4\n- [ ] Test database helpers available\n\n### Code Quality Tools:\n- [ ] PHP CS Fixer configured with modern standards\n- [ ] PHPStan configured for level 9 analysis\n- [ ] Composer normalize for consistent composer.json\n- [ ] Security audit tools configured\n- [ ] All quality tools have composer scripts\n\n### CI/CD Pipeline:\n- [ ] GitHub Actions workflows for testing\n- [ ] GitHub Actions workflows for linting\n- [ ] Multi-PHP version testing (8.3, 8.4)\n- [ ] Codecov integration with unit and integration flags\n- [ ] Automated security auditing\n\n### Documentation:\n- [ ] README.md updated with project information\n- [ ] .gitignore configured for PHP project and testing\n- [ ] Directory structure documented\n- [ ] Testing commands documented\n\n### Version Control:\n- [ ] Initial commit made with all setup files\n- [ ] Changes pushed to GitHub\n- [ ] Repository is ready for development\n\n---\n\n## Next Steps\n\nWith Task 1 complete, you're ready to move on to **Task 2: Basic Data Classes**. The foundation is now in place to start implementing the core ContentItem and MarkdownBlock classes.\n\n## Troubleshooting\n\n### Common Issues:\n\n**Composer not found:**\n- Install Composer from [getcomposer.org](https://getcomposer.org/download/)\n\n**PHP version too old:**\n- Install PHP 8.3+ or update your PHP installation\n\n**Permission errors:**\n- Ensure you have write permissions in the project directory\n\n**Git authentication issues:**\n- Set up SSH keys or use personal access tokens for GitHub\n"
        }
    ]
}